"use strict";

var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };

module.exports = Lens;
function properties(obj) {
  var key = undefined,
      lst = [];
  for (key in obj) {
    if (obj.hasOwnProperty(key)) {
      lst.push(key);
    }
  }
  return lst;
}

function isImmutable(data) {
  return data === null || typeof data == "string" || typeof data == "number";
}

function createNativeGetter(key) {
  return function getter(data) {
    if (key) {
      if (isImmutable(data) || data === undefined) {
        return undefined;
      } else {
        return data[key];
      }
    } else {
      return data;
    }
  };
}

function createNativeSetter(key) {
  return function setter(data, value) {
    if (key) {
      if (isImmutable(data)) {
        return data;
      } else if (data === undefined) {
        return _defineProperty({}, key, value);
      } else {
        var copy = properties(data).reduce(function (memo, val) {
          memo[val] = data[val];
          return memo;
        }, {});
        copy[key] = value;
        return copy;
      }
    } else {
      return data;
    }
  };
}

function createLens(getter, setter) {
  return {
    get: getter,

    set: setter,

    modify: function modify(data, func) {
      var val = this.get(data);
      return this.set(data, func(val));
    },

    compose: function compose(nextLens) {
      var _this = this;
      return createLens(function (data) {
        return nextLens.get(_this.get(data));
      }, function (data, value) {
        return _this.set(data, nextLens.set(_this.get(data), value));
      });
    }
  };
}

function Lens(key) {
  if (typeof key != "string") {
    throw new Error("key must be of string type, got " + typeof key);
  }
  var lens = key.split(".").map(function (k) {
    return createLens(createNativeGetter(k), createNativeSetter(k));
  });
  return lens.reduce(function (lens, nextLens) {
    return lens.compose(nextLens);
  });
}
//# sourceMappingURL=data:application/json;base64,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R0FBRyxFQUFFO0FBQ2hDLE1BQUksT0FBTyxHQUFHLElBQUksUUFBUSxFQUFFO0FBQzFCLFVBQU0sSUFBSSxLQUFLLHNDQUFvQyxPQUFPLEdBQUcsQ0FBRyxDQUFDO0dBQ2xFO0FBQ0QsTUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLEVBQUs7QUFDbkMsV0FBTyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUNoRSxDQUFDLENBQUM7QUFDSCxTQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQyxJQUFJLEVBQUUsUUFBUTtXQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0dBQUEsQ0FBQyxDQUFDO0NBQ2hFIiwiZmlsZSI6InNyYy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHByb3BlcnRpZXMob2JqKSB7XG4gIGxldCBrZXksIGxzdCA9IFtdO1xuICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGxzdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBsc3Q7XG59XG5cbmZ1bmN0aW9uIGlzSW1tdXRhYmxlKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBkYXRhID09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgIHR5cGVvZiBkYXRhID09IFwibnVtYmVyXCI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5hdGl2ZUdldHRlcihrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldHRlcihkYXRhKSB7XG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKGlzSW1tdXRhYmxlKGRhdGEpIHx8IGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOYXRpdmVTZXR0ZXIoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZXR0ZXIoZGF0YSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAoaXNJbW11dGFibGUoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1trZXldOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgY29weSA9IHByb3BlcnRpZXMoZGF0YSkucmVkdWNlKChtZW1vLCB2YWwpID0+IHtcbiAgICAgICAgICBtZW1vW3ZhbF0gPSBkYXRhW3ZhbF07XG4gICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgY29weVtrZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxlbnMoZ2V0dGVyLCBzZXR0ZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGdldHRlcixcblxuICAgIHNldDogc2V0dGVyLFxuXG4gICAgbW9kaWZ5KGRhdGEsIGZ1bmMpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmdldChkYXRhKTtcbiAgICAgIHJldHVybiB0aGlzLnNldChkYXRhLCBmdW5jKHZhbCkpO1xuICAgIH0sXG5cbiAgICBjb21wb3NlKG5leHRMZW5zKSB7XG4gICAgICByZXR1cm4gY3JlYXRlTGVucyhcbiAgICAgICAgKGRhdGEpICAgICAgICA9PiBuZXh0TGVucy5nZXQodGhpcy5nZXQoZGF0YSkpLFxuICAgICAgICAoZGF0YSwgdmFsdWUpID0+IHRoaXMuc2V0KGRhdGEsIG5leHRMZW5zLnNldCh0aGlzLmdldChkYXRhKSwgdmFsdWUpKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExlbnMoa2V5KSB7XG4gIGlmICh0eXBlb2Yga2V5ICE9IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGtleSBtdXN0IGJlIG9mIHN0cmluZyB0eXBlLCBnb3QgJHt0eXBlb2Yga2V5fWApO1xuICB9XG4gIGxldCBsZW5zID0ga2V5LnNwbGl0KFwiLlwiKS5tYXAoKGspID0+IHtcbiAgICByZXR1cm4gY3JlYXRlTGVucyhjcmVhdGVOYXRpdmVHZXR0ZXIoayksIGNyZWF0ZU5hdGl2ZVNldHRlcihrKSlcbiAgfSk7XG4gIHJldHVybiBsZW5zLnJlZHVjZSgobGVucywgbmV4dExlbnMpID0+IGxlbnMuY29tcG9zZShuZXh0TGVucykpO1xufSJdfQ==
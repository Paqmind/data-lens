"use strict";

exports.nativeLens = nativeLens;
exports.immutableLens = immutableLens;
var isFunction = require("lodash.isfunction");
var isString = require("lodash.isstring");
var isNumber = require("lodash.isnumber");

function properties(obj) {
  var key = undefined,
      lst = [];
  for (key in obj) {
    if (obj.hasOwnProperty(key)) {
      lst.push(key);
    }
  }
  return lst;
}

function isImmutable(data) {
  return data === undefined || data === null || isString(data) || isNumber(data);
}

function createNativeGetter(key) {
  return function getter(data) {
    if (isImmutable(data)) {
      return undefined;
    } else {
      return data[key];
    }
  };
}

function createImmutableGetter(key) {
  var getter = createNativeGetter(key);
  return function immutableGetter(data) {
    if (isImmutable(data)) {
      return undefined;
    } else if (isFunction(data.get)) {
      return data.get(key);
    } else {
      return getter(data);
    }
  };
}

function createNativeSetter(key) {
  return function setter(data, value) {
    if (isImmutable(data)) {
      return data;
    } else {
      var copy = properties(data).reduce(function (memo, val) {
        memo[val] = data[val];
        return memo;
      }, {});
      copy[key] = value;
      return copy;
    }
  };
}

function createImmutableSetter(key) {
  var setter = createNativeSetter(key);
  return function immutableSetter(data, value) {
    if (isImmutable(data)) {
      return data;
    } else if (isFunction(data.set)) {
      return data.set(key, value);
    } else {
      return setter(data, value);
    }
  };
}

function Lens(getter, setter) {
  return {
    get: getter,

    set: setter,

    modify: function modify(data, func) {
      var val = this.get(data);
      return this.set(data, func(val));
    },

    compose: function compose(nextLens) {
      var _this = this;
      return Lens(function (data) {
        return nextLens.get(_this.get(data));
      }, function (data, value) {
        return _this.set(data, nextLens.set(_this.get(data), value));
      });
    }
  };
}

function nativeLens(key) {
  var lens = key.split(".").map(function (k) {
    return Lens(createNativeGetter(k), createNativeSetter(k));
  });
  return lens.reduce(function (lens, nextLens) {
    return lens.compose(nextLens);
  });
}

function immutableLens(key) {
  var lens = key.split(".").map(function (k) {
    return Lens(createImmutableGetter(k), createImmutableSetter(k));
  });
  return lens.reduce(function (memo, val) {
    return memo.compose(val);
  });
}
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztRQThGZ0IsZ0JBQWdCLEdBQWhCLGdCQUFnQjtRQU9oQixtQkFBbUIsR0FBbkIsbUJBQW1CO0FBckduQyxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUM5QyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUMxQyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7QUFFMUMsU0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQ3ZCLE1BQUksR0FBRyxZQUFBO01BQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNsQixPQUFLLEdBQUcsSUFBSSxHQUFHLEVBQUU7QUFDZixRQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDM0IsU0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNmO0dBQ0Y7QUFDRCxTQUFPLEdBQUcsQ0FBQztDQUNaOztBQUVELFNBQVMsV0FBVyxDQUFDLElBQUksRUFBRTtBQUN6QixTQUFPLElBQUksS0FBSyxTQUFTLElBQ2xCLElBQUksS0FBSyxJQUFJLElBQ2IsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUN2Qjs7QUFFRCxTQUFTLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtBQUMvQixTQUFPLFNBQVMsTUFBTSxDQUFDLElBQUksRUFBRTtBQUMzQixRQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUNyQixhQUFPLFNBQVMsQ0FBQztLQUNsQixNQUFNO0FBQ0wsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbEI7R0FDRixDQUFDO0NBQ0g7O0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxHQUFHLEVBQUU7QUFDbEMsTUFBSSxNQUFNLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDckMsU0FBTyxTQUFTLGVBQWUsQ0FBQyxJQUFJLEVBQUU7QUFDcEMsUUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDckIsYUFBTyxTQUFTLENBQUM7S0FDbEIsTUFDSSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDN0IsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3RCLE1BQU07QUFDTCxhQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNyQjtHQUNGLENBQUM7Q0FDSDs7QUFFRCxTQUFTLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtBQUMvQixTQUFPLFNBQVMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7QUFDbEMsUUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDckIsYUFBTyxJQUFJLENBQUM7S0FDYixNQUFNO0FBQ0wsVUFBSSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQUksRUFBRSxHQUFHLEVBQUs7QUFDaEQsWUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QixlQUFPLElBQUksQ0FBQztPQUNiLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDUCxVQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ2xCLGFBQU8sSUFBSSxDQUFDO0tBQ2I7R0FDRixDQUFDO0NBQ0g7O0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxHQUFHLEVBQUU7QUFDbEMsTUFBSSxNQUFNLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDckMsU0FBTyxTQUFTLGVBQWUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO0FBQzNDLFFBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3JCLGFBQU8sSUFBSSxDQUFDO0tBQ2IsTUFDSSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDN0IsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUM3QixNQUFNO0FBQ0wsYUFBTyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzVCO0dBQ0YsQ0FBQztDQUNIOztBQUVELFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUU7QUFDNUIsU0FBTztBQUNMLE9BQUcsRUFBRSxNQUFNOztBQUVYLE9BQUcsRUFBRSxNQUFNOztBQUVYLFVBQU0sRUFBQSxnQkFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ2pCLFVBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNsQzs7QUFFRCxXQUFPLEVBQUEsaUJBQUMsUUFBUSxFQUFFOztBQUNoQixhQUFPLElBQUksQ0FDVCxVQUFDLElBQUk7ZUFBWSxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQUssR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO09BQUEsRUFDN0MsVUFBQyxJQUFJLEVBQUUsS0FBSztlQUFLLE1BQUssR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQUssR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO09BQUEsQ0FDckUsQ0FBQztLQUNIO0dBQ0YsQ0FBQztDQUNIOztBQUVNLFNBQVMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFO0FBQ3BDLE1BQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsQ0FBQyxFQUFLO0FBQ25DLFdBQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FDMUQsQ0FBQyxDQUFDO0FBQ0gsU0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxFQUFFLFFBQVE7V0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztHQUFBLENBQUMsQ0FBQztDQUNoRTs7QUFFTSxTQUFTLG1CQUFtQixDQUFDLEdBQUcsRUFBRTtBQUN2QyxNQUFJLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsRUFBSztBQUNuQyxXQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQ2hFLENBQUMsQ0FBQztBQUNILFNBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQUksRUFBRSxHQUFHO1dBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7R0FBQSxDQUFDLENBQUM7Q0FDdEQiLCJmaWxlIjoic3JjL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGlzRnVuY3Rpb24gPSByZXF1aXJlKFwibG9kYXNoLmlzZnVuY3Rpb25cIik7XG5sZXQgaXNTdHJpbmcgPSByZXF1aXJlKFwibG9kYXNoLmlzc3RyaW5nXCIpO1xubGV0IGlzTnVtYmVyID0gcmVxdWlyZShcImxvZGFzaC5pc251bWJlclwiKTtcblxuZnVuY3Rpb24gcHJvcGVydGllcyhvYmopIHtcbiAgbGV0IGtleSwgbHN0ID0gW107XG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgbHN0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxzdDtcbn1cblxuZnVuY3Rpb24gaXNJbW11dGFibGUoZGF0YSkge1xuICByZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICBkYXRhID09PSBudWxsIHx8XG4gICAgICAgICBpc1N0cmluZyhkYXRhKSB8fFxuICAgICAgICAgaXNOdW1iZXIoZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5hdGl2ZUdldHRlcihrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldHRlcihkYXRhKSB7XG4gICAgaWYgKGlzSW1tdXRhYmxlKGRhdGEpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGF0YVtrZXldO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW1tdXRhYmxlR2V0dGVyKGtleSkge1xuICBsZXQgZ2V0dGVyID0gY3JlYXRlTmF0aXZlR2V0dGVyKGtleSk7XG4gIHJldHVybiBmdW5jdGlvbiBpbW11dGFibGVHZXR0ZXIoZGF0YSkge1xuICAgIGlmIChpc0ltbXV0YWJsZShkYXRhKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihkYXRhLmdldCkpIHtcbiAgICAgIHJldHVybiBkYXRhLmdldChrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0dGVyKGRhdGEpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTmF0aXZlU2V0dGVyKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gc2V0dGVyKGRhdGEsIHZhbHVlKSB7XG4gICAgaWYgKGlzSW1tdXRhYmxlKGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGNvcHkgPSBwcm9wZXJ0aWVzKGRhdGEpLnJlZHVjZSgobWVtbywgdmFsKSA9PiB7XG4gICAgICAgIG1lbW9bdmFsXSA9IGRhdGFbdmFsXTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSk7XG4gICAgICBjb3B5W2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW1tdXRhYmxlU2V0dGVyKGtleSkge1xuICBsZXQgc2V0dGVyID0gY3JlYXRlTmF0aXZlU2V0dGVyKGtleSk7XG4gIHJldHVybiBmdW5jdGlvbiBpbW11dGFibGVTZXR0ZXIoZGF0YSwgdmFsdWUpIHtcbiAgICBpZiAoaXNJbW11dGFibGUoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKGRhdGEuc2V0KSkge1xuICAgICAgcmV0dXJuIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc2V0dGVyKGRhdGEsIHZhbHVlKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIExlbnMoZ2V0dGVyLCBzZXR0ZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGdldHRlcixcblxuICAgIHNldDogc2V0dGVyLFxuXG4gICAgbW9kaWZ5KGRhdGEsIGZ1bmMpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmdldChkYXRhKTtcbiAgICAgIHJldHVybiB0aGlzLnNldChkYXRhLCBmdW5jKHZhbCkpO1xuICAgIH0sXG5cbiAgICBjb21wb3NlKG5leHRMZW5zKSB7XG4gICAgICByZXR1cm4gTGVucyhcbiAgICAgICAgKGRhdGEpICAgICAgICA9PiBuZXh0TGVucy5nZXQodGhpcy5nZXQoZGF0YSkpLFxuICAgICAgICAoZGF0YSwgdmFsdWUpID0+IHRoaXMuc2V0KGRhdGEsIG5leHRMZW5zLnNldCh0aGlzLmdldChkYXRhKSwgdmFsdWUpKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOYXRpdmVMZW5zKGtleSkge1xuICBsZXQgbGVucyA9IGtleS5zcGxpdChcIi5cIikubWFwKChrKSA9PiB7XG4gICAgcmV0dXJuIExlbnMoY3JlYXRlTmF0aXZlR2V0dGVyKGspLCBjcmVhdGVOYXRpdmVTZXR0ZXIoaykpXG4gIH0pO1xuICByZXR1cm4gbGVucy5yZWR1Y2UoKGxlbnMsIG5leHRMZW5zKSA9PiBsZW5zLmNvbXBvc2UobmV4dExlbnMpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUltbXV0YWJsZUxlbnMoa2V5KSB7XG4gIGxldCBsZW5zID0ga2V5LnNwbGl0KFwiLlwiKS5tYXAoKGspID0+IHtcbiAgICByZXR1cm4gTGVucyhjcmVhdGVJbW11dGFibGVHZXR0ZXIoayksIGNyZWF0ZUltbXV0YWJsZVNldHRlcihrKSlcbiAgfSk7XG4gIHJldHVybiBsZW5zLnJlZHVjZSgobWVtbywgdmFsKSA9PiBtZW1vLmNvbXBvc2UodmFsKSk7XG59XG4iXX0=

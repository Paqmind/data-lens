"use strict";

exports.nativeLens = nativeLens;
exports.immutableLens = immutableLens;
function properties(obj) {
  var key = undefined,
      lst = [];
  for (key in obj) {
    if (obj.hasOwnProperty(key)) {
      lst.push(key);
    }
  }
  return lst;
}

function isImmutable(data) {
  return data === undefined || data === null || typeof data == "string" || typeof data == "number";
}

function createNativeGetter(key) {
  return function getter(data) {
    if (key) {
      if (isImmutable(data)) {
        return undefined;
      } else {
        return data[key];
      }
    } else {
      return data;
    }
  };
}

function createImmutableGetter(key) {
  return function immutableGetter(data) {
    if (key) {
      if (isImmutable(data)) {
        return undefined;
      } else if (data.get instanceof Function) {
        return data.get(key);
      } else {
        return createNativeGetter(key)(data);
      }
    } else {
      return data;
    }
  };
}

function createNativeSetter(key) {
  return function setter(data, value) {
    if (key) {
      if (isImmutable(data)) {
        return data;
      } else {
        var copy = properties(data).reduce(function (memo, val) {
          memo[val] = data[val];
          return memo;
        }, {});
        copy[key] = value;
        return copy;
      }
    } else {
      return data;
    }
  };
}

function createImmutableSetter(key) {
  return function immutableSetter(data, value) {
    if (key) {
      if (isImmutable(data)) {
        return data;
      } else if (data.set instanceof Function) {
        return data.set(key, value);
      } else {
        return createNativeSetter(key)(data, value);
      }
    } else {
      return data;
    }
  };
}

function Lens(getter, setter) {
  return {
    get: getter,

    set: setter,

    modify: function modify(data, func) {
      var val = this.get(data);
      return this.set(data, func(val));
    },

    compose: function compose(nextLens) {
      var _this = this;
      return Lens(function (data) {
        return nextLens.get(_this.get(data));
      }, function (data, value) {
        return _this.set(data, nextLens.set(_this.get(data), value));
      });
    }
  };
}

function nativeLens(key) {
  if (typeof key != "string") {
    throw new Error("key must be of string type, got " + typeof key);
  }
  var lens = key.split(".").map(function (k) {
    return Lens(createNativeGetter(k), createNativeSetter(k));
  });
  return lens.reduce(function (lens, nextLens) {
    return lens.compose(nextLens);
  });
}

function immutableLens(key) {
  if (typeof key != "string") {
    throw new Error("key must be of string type, got " + typeof key);
  }
  var lens = key.split(".").map(function (k) {
    return Lens(createImmutableGetter(k), createImmutableSetter(k));
  });
  return lens.reduce(function (memo, val) {
    return memo.compose(val);
  });
}
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;base64,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QUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FDMUQsQ0FBQyxDQUFDO0FBQ0gsU0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxFQUFFLFFBQVE7V0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztHQUFBLENBQUMsQ0FBQztDQUNoRTs7QUFFTSxTQUFTLGFBQWEsQ0FBQyxHQUFHLEVBQUU7QUFDakMsTUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLEVBQUU7QUFDMUIsVUFBTSxJQUFJLEtBQUssc0NBQW9DLE9BQU8sR0FBRyxDQUFHLENBQUM7R0FDbEU7QUFDRCxNQUFJLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsRUFBSztBQUNuQyxXQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQ2hFLENBQUMsQ0FBQztBQUNILFNBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQUksRUFBRSxHQUFHO1dBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7R0FBQSxDQUFDLENBQUM7Q0FDdEQiLCJmaWxlIjoic3JjL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcHJvcGVydGllcyhvYmopIHtcbiAgbGV0IGtleSwgbHN0ID0gW107XG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgbHN0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxzdDtcbn1cblxuZnVuY3Rpb24gaXNJbW11dGFibGUoZGF0YSkge1xuICByZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICBkYXRhID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiIHx8XG4gICAgICAgICB0eXBlb2YgZGF0YSA9PSBcIm51bWJlclwiO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOYXRpdmVHZXR0ZXIoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXR0ZXIoZGF0YSkge1xuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChpc0ltbXV0YWJsZShkYXRhKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbW11dGFibGVHZXR0ZXIoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbW11dGFibGVHZXR0ZXIoZGF0YSkge1xuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChpc0ltbXV0YWJsZShkYXRhKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZGF0YS5nZXQgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICByZXR1cm4gZGF0YS5nZXQoa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVOYXRpdmVHZXR0ZXIoa2V5KShkYXRhKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOYXRpdmVTZXR0ZXIoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZXR0ZXIoZGF0YSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAoaXNJbW11dGFibGUoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgY29weSA9IHByb3BlcnRpZXMoZGF0YSkucmVkdWNlKChtZW1vLCB2YWwpID0+IHtcbiAgICAgICAgICBtZW1vW3ZhbF0gPSBkYXRhW3ZhbF07XG4gICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgY29weVtrZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUltbXV0YWJsZVNldHRlcihrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltbXV0YWJsZVNldHRlcihkYXRhLCB2YWx1ZSkge1xuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChpc0ltbXV0YWJsZShkYXRhKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGRhdGEuc2V0IGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU5hdGl2ZVNldHRlcihrZXkpKGRhdGEsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBMZW5zKGdldHRlciwgc2V0dGVyKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0OiBnZXR0ZXIsXG5cbiAgICBzZXQ6IHNldHRlcixcblxuICAgIG1vZGlmeShkYXRhLCBmdW5jKSB7XG4gICAgICBsZXQgdmFsID0gdGhpcy5nZXQoZGF0YSk7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoZGF0YSwgZnVuYyh2YWwpKTtcbiAgICB9LFxuXG4gICAgY29tcG9zZShuZXh0TGVucykge1xuICAgICAgcmV0dXJuIExlbnMoXG4gICAgICAgIChkYXRhKSAgICAgICAgPT4gbmV4dExlbnMuZ2V0KHRoaXMuZ2V0KGRhdGEpKSxcbiAgICAgICAgKGRhdGEsIHZhbHVlKSA9PiB0aGlzLnNldChkYXRhLCBuZXh0TGVucy5zZXQodGhpcy5nZXQoZGF0YSksIHZhbHVlKSlcbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmF0aXZlTGVucyhrZXkpIHtcbiAgaWYgKHR5cGVvZiBrZXkgIT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihga2V5IG11c3QgYmUgb2Ygc3RyaW5nIHR5cGUsIGdvdCAke3R5cGVvZiBrZXl9YCk7XG4gIH1cbiAgbGV0IGxlbnMgPSBrZXkuc3BsaXQoXCIuXCIpLm1hcCgoaykgPT4ge1xuICAgIHJldHVybiBMZW5zKGNyZWF0ZU5hdGl2ZUdldHRlcihrKSwgY3JlYXRlTmF0aXZlU2V0dGVyKGspKVxuICB9KTtcbiAgcmV0dXJuIGxlbnMucmVkdWNlKChsZW5zLCBuZXh0TGVucykgPT4gbGVucy5jb21wb3NlKG5leHRMZW5zKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbW11dGFibGVMZW5zKGtleSkge1xuICBpZiAodHlwZW9mIGtleSAhPSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBrZXkgbXVzdCBiZSBvZiBzdHJpbmcgdHlwZSwgZ290ICR7dHlwZW9mIGtleX1gKTtcbiAgfVxuICBsZXQgbGVucyA9IGtleS5zcGxpdChcIi5cIikubWFwKChrKSA9PiB7XG4gICAgcmV0dXJuIExlbnMoY3JlYXRlSW1tdXRhYmxlR2V0dGVyKGspLCBjcmVhdGVJbW11dGFibGVTZXR0ZXIoaykpXG4gIH0pO1xuICByZXR1cm4gbGVucy5yZWR1Y2UoKG1lbW8sIHZhbCkgPT4gbWVtby5jb21wb3NlKHZhbCkpO1xufVxuIl19